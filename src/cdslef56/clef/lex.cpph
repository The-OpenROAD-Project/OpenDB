/*
 * This file is part of the Cadence LEF/DEF Open Source Distribution, Product
 * Version 5.6, and is subject to the Cadence LEF/DEF Open Source License
 * Agreement. Your continued use of this file constitutes your acceptance of
 * the terms of the LEF/DEF Open Source License and an agreement to abide by
 * its terms. If you don't agree with this, you must remove this and any
 * other files which are part of the distribution and destroy any copies
 * made.
 * 
 * For updates, support, or to become part of the LEF/DEF Community, check
 * www.openeda.org for details.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <ctype.h>
#include <stdlib.h>
#include "lex.h"
#include "lefiDebug.h"
#include "lefrReader.h"
#include "lefrCallBacks.h"

#ifdef WIN32
#include <direct.h>
#else        /* not WIN32 */
#include <unistd.h>
#endif        /* WIN32 */

#define DONE_EXT ( \
 nn > 5 && \
 tolower(Hist_text[nn-1]) == 't' && \
 tolower(Hist_text[nn-2]) == 'x' && \
 tolower(Hist_text[nn-3]) == 'e' && \
 tolower(Hist_text[nn-4]) == 'd' && \
 tolower(Hist_text[nn-5]) == 'n' && \
 tolower(Hist_text[nn-6]) == 'e')
#define END_LIB ( \
 nn > 10 && \
 tolower(Hist_text[nn-1]) == 'y' && \
 tolower(Hist_text[nn-2]) == 'r' && \
 tolower(Hist_text[nn-3]) == 'a' && \
 tolower(Hist_text[nn-4]) == 'r' && \
 tolower(Hist_text[nn-5]) == 'b' && \
 tolower(Hist_text[nn-6]) == 'i' && \
 tolower(Hist_text[nn-7]) == 'l' && \
 tolower(Hist_text[nn-8]) == ' ' && \
 tolower(Hist_text[nn-9]) == 'd' && \
 tolower(Hist_text[nn-10]) == 'n' && \
 tolower(Hist_text[nn-11]) == 'e')
#define STRSIZE 4096
extern LEFI_READ_FUNCTION lefiReadFunction;

extern FILE    *lefrFile;

extern char    *lefrFileName;

int             lef_errors = 0;  /* number of errors */

int             lef_ntokens = 0;

int             lef_nlines = 1;

char           *lefch;

double          leflVal;

double          lefrVal;

/* 12/08/1999 -- Wanda da Rosa */
/* variable to count number of warnings */
int             lef_warnings = 0;

/* 12/08/1999 -- Wanda da Rosa */
/* file pointer to the lefRWarning.log */
FILE           *lefrLog = 0;

static int      hasOpenedLogFile = 0;  /* flag on how to open the warning
           * log file */

/* To keep track number of line read & call the user's callback if defined */
extern LEFI_LINE_NUMBER_FUNCTION lefiLineNumberFunction;

extern char    *lef_kywd(int num);

extern int      lefiDeltaNumberLines;

/************Some simple file reading routines since ungetc() proves ****/
/************to be quite slow, and we don't need multiple chars of pushback */

#ifndef WIN32
#include <unistd.h>
#endif

#define IN_BUF_SIZE 16384
static char     buffer[IN_BUF_SIZE];

static int      s_o_b = 0;  /* byte count at start of buffer */

static char    *next;

static char    *last;

static int      encrypted;  /* Is the input encrypted */

static int      first_buffer;  /* First buffer read from the file */

static int      inDefine = 0;  /* Keep track it is within a define statement */

typedef void (*METERCALLBACK) (int);

METERCALLBACK   lefmeters = 0;  /* TRUE if we are using meters */

char            lefcommentChar = '#';

static int      input_level = -1;  /* points to top of stack */

static char    *stack[20];  /* the stack itself */

int             lefNdRule = 0;  /* use to keep track of nondefaultrule */

static char    *ndName = 0;

void 
lefReloadBuffer()
{
  int             nb;

  nb = 0;
  s_o_b += last - buffer + 1;
  if (first_buffer) {
    first_buffer = 0;
    if (lefiReadFunction) {
      if (( nb = (*lefiReadFunction) (lefrFile, buffer, 4 )) != 4) {
        next = NULL;
        return;
      }
    } else {
      if (( nb = fread(buffer, 1, 4, lefrFile )) != 4) {
        next = NULL;
        return;
      }
    }
  }
  if (lefmeters)
    (*lefmeters) (s_o_b);
  if (nb == 0) {
    if (lefiReadFunction)
      nb = (*lefiReadFunction) (lefrFile, buffer, IN_BUF_SIZE);
    else
      /* This is a normal file so just read some bytes. */
      nb = fread(buffer, 1, IN_BUF_SIZE, lefrFile);
  }
  if (nb <= 0) {
    next = NULL;
  } else {
    next = buffer;
    last = buffer + nb - 1;
  }
}

void 
lefFakeInit()
{
  last = buffer - 1;
  next = buffer;
  encrypted = 0;
  first_buffer = 1;
}

int 
lefGetc()
{
  if (input_level >= 0) {  /* Token has been getting from */
    char           *ch, *s;

    s = ch = stack[input_level];
    stack[input_level] = ++s;
    return *ch;
  }
  if (next > last)
    lefReloadBuffer();
  if (next == NULL)
    return EOF;
  return *next++;
}

void 
UNlefGetc(char ch)
{
  *(--next) = ch;
}

char           *
lefFakeFgets(char *s, int n)
{
  int             i;

  char           *old_s = s;

  for (i = 0; i < n - 1; i++) {
    int             ch = lefGetc();

    if (ch == EOF) {
      if (i == 0)
        return NULL;
      break;
    }
    *s++ = ch;
    if (ch == '\n')
      break;
  }
  *s = '\0';
  return old_s;
}

/* The following two variables are for communicating with the parser */
int             lefDumbMode = 0;/* read next N tokens in dumb mode */

int             lefNewIsKeyword = 0;  /* if set, the word NEW is keyword
           * even in dumb mode */

int             lefNoNum = 0;  /* no numbers for the next 'lefNoNum' tokens */

int             lefRealNum = 0;  /* the following number is real */

int             lefNlToken = FALSE;  /* if TRUE, return newlines as a
           * token */

int             lefDefIf = FALSE;  /* if TRUE, is within the defines
           * if-then-else */

extern int      doneLib;

extern int      ge56almostDone;

extern int      ge56done;

extern int      lefNamesCaseSensitive;

extern int      lefrShiftCase;

extern char     lefDebug[];  /* can set from command line for debugging */

static int      history_text_size = STRSIZE;

char           *Hist_text = 0;

static void    *Keyword_set;  /* hash table of keywords */

void           *define_set = NULL;  /* hash table of &define constructs */

static void    *defines_set = NULL;  /* hash table of string constructs */

static void    *defineb_set = NULL;  /* hash table of boolean defines */

void           *alias_set = NULL;  /* hash table of &alias constructs */

static void    *message_set = NULL;  /* hash table of message constructs */

/* Ring buffer storage */
#define RING_SIZE 10
#define RING_STRING_SIZE 64
static char    *ring[RING_SIZE];

static int      ringSizes[RING_SIZE];

static int      ringPlace;

/*
 * Return a copy of the string allocated from the ring buffer. We will keep
 * several strings in the buffer and just reuse them. This could cause
 * problems if we need to use more strings than we have in the buffer.
 */
static char    *
ringCopy(char *string)
{
  int             len = strlen(string) + 1;

  if (++ringPlace >= RING_SIZE)
    ringPlace = 0;
  if (len > ringSizes[ringPlace]) {
    ring[ringPlace] = (char *) lefRealloc(ring[ringPlace], len);
    ringSizes[ringPlace] = len;
  }
  strcpy(ring[ringPlace], string);
  return ring[ringPlace];
}

static void 
initRingBuffer()
{
  int             i;

  ringPlace = 0;
  for (i = 0; i < RING_SIZE; i++) {
    ring[i] = (char *) lefMalloc(RING_STRING_SIZE);
    ringSizes[i] = RING_STRING_SIZE;
  }
}

char           *
qStrCopy(char *string)
{
  int             len = strlen(string) + 3;

  char           *retStr;

  retStr = (char *) lefMalloc(len);
  sprintf(retStr, "\"%s\"", string);
  return retStr;
}

void 
lef_lex_un_init()
{
  int             i;

  /* We will need to do some table cleanup here */
  if (Hist_text) {
    free(Hist_text);
    Hist_text = 0;
  }
  for (i = 0; i < RING_SIZE; i++) {
    if (ring[i])
      free(ring[i]);
    ring[i] = 0;
    ringSizes[i] = 0;
  }

  /*
     * 1/14/2000 - Wanda da Rosa, as per requested by Bob Doig in pcr 288770
     * output of number of warnings are suppressed. if (lefrLog) { if
     * (lef_warnings) { if (lef_warnings > 1) printf("%d warnings were written
     * in lefRWarning.log.\n", lef_warnings); else printf("%d warning was
     * written in lefRWarning.log.\n", lef_warnings); } } else { if
     * (lef_warnings) printf("The lef parser has generated %d warning(s).\n",
     * lef_warnings); }
     */
  /* 2/6/2002 - pcr 424751, reset lef_errors = 0, so subsequent parse will */
  /* not be affected */
  lef_errors = 0;
  /* Close the file */
  if (lefrLog) {
    fclose(lefrLog);
    lefrLog = 0;
  }
}

void 
lef_lex_init()
{
  static int      first = 1;

  struct stat     statbuf;

  initRingBuffer();
  if (!Hist_text)
    Hist_text = (char *) lefMalloc(history_text_size + 1);
  if (first) {
    Keyword_set = lef_make_stringtab(TABLE_CALLER_ALLOCS, "keywords",
        TABLE_USE_CASE);
    lef_init_symbol_table(Keyword_set);
    first = 0;
  }
  lef_nlines = 1;
  lefFakeInit();
  /* 12/08/1999 -- Wanda da Rosa */
  /* open the lefrLog to write */

  /*
     * 3/23/2000 -- Wanda da Rosa. Due to lots of complain, don't open the file
     * until there is really warning messages only. if (( lefrLog =
     * fopen("lefRWarning.log", "w" )) == 0) { printf( "WARNING: Unable to open
     * the file lefRWarning.log for writing from the directory %s.\n",
     * getcwd(NULL, 64 )); printf("Warning messages will not be printed.\n"); }
     */
  /* 4/11/2003 - Remove file lefrRWarning.log from directory if it exist */
  /* pcr 569729 */
  if (stat("lefRWarning.log", &statbuf) != -1) {
    /* file exist, remove it */
    remove("lefRWarning.log");
  }
  /* initialize the value */
  leflVal = strtod("-2147483648", &lefch);
  lefrVal = strtod("2147483647", &lefch);
}

/*
 * NOTE: we don't allocate these tables until they are used. The reason we
 * don't allocate at the beginning of the program is that we don't know at
 * that point if we should be case sensitive or not.
 */
void 
lefAddStringDefine(char *token, char *string)
{
  char           *tmpStr = (char *) lefMalloc(strlen(string) + 2);

  sprintf(tmpStr, "\"%s", string);
  if (defines_set == NULL)
    defines_set = lef_make_stringtab(TABLE_CALLER_ALLOCS,
        "&defines", lefNamesCaseSensitive ? TABLE_USE_CASE : TABLE_IGNORE_CASE);
  if (lefDefIf == TRUE)
    lef_add_to_stringtab(defines_set, strdup(token), strdup(string ));
    else
    lef_add_to_stringtab(defines_set, strdup(token), strdup(tmpStr ));
  lefDefIf = FALSE;
  inDefine = 0;
  free(tmpStr);
}

void 
lefAddBooleanDefine(char *token, int val)
{
  if (defineb_set == NULL)
    defineb_set = lef_make_stringtab(TABLE_CALLER_ALLOCS,
        "&defineb", lefNamesCaseSensitive ? TABLE_USE_CASE : TABLE_IGNORE_CASE);
  lef_add_to_stringtab(defineb_set, strdup(token), &val);
}

void 
lefAddNumDefine(char *token, double val)
{
  double         *dp = (double *) lefMalloc(sizeof(double ));

  *dp = val;
  if (define_set == NULL)
    define_set = lef_make_stringtab(TABLE_CALLER_ALLOCS,
        "&define", lefNamesCaseSensitive ? TABLE_USE_CASE : TABLE_IGNORE_CASE);
  lef_add_to_stringtab(define_set, strdup(token), dp);
}

/* Store the message data in a stack */
void 
lefAddStringMessage(char *token, char *string)
{
  if (message_set == NULL)
    message_set = lef_make_stringtab(TABLE_CALLER_ALLOCS,
        "&message", lefNamesCaseSensitive ? TABLE_USE_CASE : TABLE_IGNORE_CASE);
  lef_add_to_stringtab(message_set, strdup(token), strdup(string ));
}

static int
GetTokenFromStack(char *s)
{
  char           *ch;    /* utility variable */

  char           *prS = NULL;  /* pointing to the previous char or s */

  char           *save = s;  /* for debug printing */

  while (input_level >= 0) {
    for (ch = stack[input_level]; *ch != 0; ch++)  /* skip white space */
      if (*ch != ' ' && *ch != '\t' && (lefNlToken || *ch != '\n') &&
          *ch != '\r')
        break;
    /* did we find anything? If not, decrement level and try again */
    if (*ch == 0)
      input_level--;
    else if (*ch == '\n') {
      *s++ = *ch;
      *s = 0;
      if (lefDebug[11])
        printf("Stack[%d] Newline token\n", input_level);
      return TRUE;
    } else {      /* we found something */
      for (;; ch++) {
        if (*ch == ' ' || *ch == '\t' || *ch == '\n' || *ch == 0) {

          /*
               * 10/10/2000 - Wanda da Rosa, pcr 341032 * Take out the last '"',
               * the 1st will be skip later
               */
          if (*prS == '"') {
            *prS = '\0';
          } else
            *s++ = '\0';
          stack[input_level] = ch;
          if (lefDebug[11])
            printf("Stack[%d]: <%s>, dm=%d\n",
                input_level, save, lefDumbMode);
          return TRUE;
        }

        /*
           * 10/10/2000 - Wanda da Rosa, pcr 341032 * Save the location of the
           * previous s
           */
        prS = s;
        *s++ = *ch;
      }
    }
  }
  return FALSE;      /* if we get here, we ran out of input levels */
}

static int
GetToken(char *s)
{
  int             ch;

  int             prCh;

  int             numCh = 0;

  int             prtWar = 0;

  lef_ntokens++;
  if (input_level >= 0) {  /* if we are expanding an alias */
    if (GetTokenFromStack(s ))  /* try to get a token from it */
      return TRUE;    /* if we get one, return it */
  }        /* but if not, continue */
  /* skip blanks and count lines */
  while (( ch = lefGetc( )) != EOF) {
    /* check if the file is encrypted and user allows to read */
    if (ch == '\n') {
      lef_nlines++;
      /* call the callback line number function if it is set */
      if (lefiLineNumberFunction &&
          (lef_nlines % lefiDeltaNumberLines) == 0)
        lefiLineNumberFunction(lef_nlines);
    }
    if (ch != ' ' && ch != '\t' && (lefNlToken || ch != '\n') && ch != '\r')
      break;
  }
  if (ch == EOF)
    return FALSE;
  numCh++;
  if (ch == '\n') {
    *s++ = ch;
    *s = '\0';
    if (lefDebug[11])
      printf("Newline token\n");
    return TRUE;
  }
  /* now get the token */
  if (ch == '"') {
    do {

      /*
             * 8/22/2000 - Wanda da Rosa, pcr 333334 * save the previous char to
             * allow backslash quote within quote
             */
      prCh = ch;

      /*
             * 5/5/2004 - pcr 704784 * if name, or quote string is longer than
             * STRSIZE, truncate it * as described in the language reference manual
             */
      if (numCh < STRSIZE)
        *s++ = ch;
      else {
        if (!prtWar)
          yywarning("String has exceeded 4096 characters, extra characters are truncated.");
        prtWar = 1;
      }
      ch = lefGetc();
      numCh++;
      /* 7/23/2003 - pcr 606558 - do not allow \n in a string instead */
      /* of ; */
      if (( ch == '\n') || (ch == EOF )) {

        /*
           * 5/30/2002 - Wanda da Rosa pcr 448738 * missing end "
           */
        return FALSE;
      }
    }    while (( ch != '"') || (prCh == '\\' ));
    *s = '\0';
    return TRUE;
  }
  if (lefNamesCaseSensitive) {
    for (;; ch = lefGetc( )) {
      if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' ||
          ch == EOF)
        break;
      if (numCh < STRSIZE)
        *s++ = ch;
      else {
        if (!prtWar)
          yywarning("Name has exceeded 4096 characters, extra characters are truncated.");
        prtWar = 1;
      }
      numCh++;
    }
  } else if (lefrShiftCase) {  /* we are case insensitive, use a different
           * loop */
    for (;; ch = lefGetc( )) {
      if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' ||
          ch == EOF)
        break;
      if (numCh < STRSIZE)
        *s++ = (ch >= 'a' && ch <= 'z') ? (ch - 'a' + 'A') : ch;
      else {
        if (!prtWar)
          yywarning("Name has exceeded 4096 characters, extra characters are truncated.");
        prtWar = 1;
      }
      numCh++;
    }
  } else {
    for (;; ch = lefGetc( )) {
      if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' ||
          ch == EOF)
        break;
      if (numCh < STRSIZE)
        *s++ = ch;
      else {
        if (!prtWar)
          yywarning("Name has exceeded 4096 characters, extra characters are truncated.");
        prtWar = 1;
      }
      numCh++;
    }
  }
  /* If we got this far, the last char was whitespace */
  *s = '\0';
  if (ch != EOF)    /* shouldn't ungetc an EOF */
    UNlefGetc(ch);
  return TRUE;
}

/* creates an upper case copy of an array */
void 
lefuc_array(char *source, char *dest)
{
  for (; *source != 0;)
    *dest++ = toupper(*source++);
  *dest = 0;
}

void            yyerror(const char *s);

void 
lefStoreAlias()
{
  char            aname[STRSIZE];  /* the name of the alias */

  char            line[10240];  /* a line of the alias contents */

  char            uc_line[10240];  /* uppercase version of the line */

  char           *p;    /* location of &ENDALIAS on the line */

  char           *so_far;  /* contains alias contents as we build it */

  GetToken(aname);
  GetToken(line);    /* should be "=" */
  if (strcmp(line, "=") != 0)
    yyerror("Expecting '='");
  /* now keep getting lines till we get one that contains &ENDALIAS */
  so_far = (char *) lefMalloc(1);
  strcpy(so_far, "");
  for (p = NULL; p == NULL;) {
    if (lefFakeFgets(line, 10240) == NULL)
      yyerror("End of file in &ALIAS");
    lef_nlines++;
    /* call the callback line number function if it is set */
    if (lefiLineNumberFunction && (lef_nlines % lefiDeltaNumberLines) == 0)
      lefiLineNumberFunction(lef_nlines);
    lefuc_array(line, uc_line);  /* make upper case copy */
    p = strstr(uc_line, "&ENDALIAS");  /* look for END_ALIAS */
    if (p != NULL)    /* if we find it */
      *(line + (p - uc_line )) = 0;  /* remove it from the line */
    so_far = (char *) lefRealloc(so_far, strlen(so_far) + strlen(line) + 1);
    strcat(so_far, line);
  }
  if (alias_set == NULL)
    alias_set = lef_make_stringtab(TABLE_CALLER_ALLOCS,
        "&alias", lefNamesCaseSensitive ? TABLE_USE_CASE : TABLE_IGNORE_CASE);
  lef_add_to_stringtab(alias_set, strdup(aname), so_far);
}

int             lefamper_lookup(char *token);  /* forward reference to this
             * routine */

static char     token[STRSIZE];  /* global so error message can print it */

static char     saved_token[STRSIZE];  /* for an (illegal) usage ';TOKEN' */

static char     pv_token[STRSIZE];  /* previous token, for check ;
           * without space */

/*
 * The main routine called by the YACC parser to get the next token. Returns
 * 0 if no more tokens are available. Returns an integer for keywords (see
 * the yacc_defines.h for values) Returns the character itself for
 * punctuation Returns NUMBER for numeric looking tokens Returns T_STRING for
 * anything else If the global "lefDumbMode" is > 0, it reads the next token
 * in "dumb mode". In this case, it does not do keyword lookup, or attempt to
 * read a token as a number; if the token is not punctuation, it's a
 * T_STRING. Each token read decrements lefDumbMode, so you can instruct the
 * the lexer to read the next N tokens in dumb mode by setting "lefDumbMode"
 * to that value.
 * 
 * Newlines are in general silently ignored. If the global lefNlToken is true,
 * however, they are returned as the token K_NL.
 */
extern int      lefsublex();

int 
yylex()
{
  int             v = lefsublex();

  if (lefDebug[13]) {
    if (v == 0) {
      printf("yylex NIL\n");
    } else if (v < 256) {
      printf("yylex char %c\n", v);
    } else if (v == QSTRING) {
      printf("yylex quoted string '%s'\n", yylval.string);
    } else if (v == T_STRING) {
      printf("yylex string '%s'\n", yylval.string);
    } else if (v == NUMBER) {
      printf("yylex number %f\n", yylval.dval);
    } else {
      printf("yylex keyword %s\n", lef_kywd(v ));
    }
  }
  /* At 5.6, doneLib is always true, since "END LIBRARY" is optional */
  if (( v == 0) && (!doneLib )) {
    yyerror("Incomplete lef file");
    return (-1);
  }
  return v;
}

int 
lefsublex()
{
  char            uc_token[STRSIZE];  /* upper case copy of the token */

  char            fc;

  double          numVal;

  strcpy(pv_token, token);  /* save the previous token */

  /*
     * First, we eat all the things the parser should be unaware of. This
     * includes: a) Comments b) &alias definitions c) &alias expansions
     */
  for (;;) {
    if (!GetToken(token ))  /* get a raw token */
      return 0;
    fc = token[0];

    /*
         * first, check for comments or &alias statements. Comments we ignore,
         * and &alias statements are eaten and recorded by the lexer.
         */
    if (fc == lefcommentChar) {
      for (fc = lefGetc();; fc = lefGetc( )) {  /* so skip to the end of line */
        if (fc == EOF)
          return 0;
        if (fc == '\n') {
          lef_nlines++;
          /* call the callback line number function if it is set */
          if (lefiLineNumberFunction &&
              (lef_nlines % lefiDeltaNumberLines) == 0)
            lefiLineNumberFunction(lef_nlines);
          break;
        }
      }
    } else if (fc == '&') {
      /* begins with &. If &alias, read contents and */
      /* store them. Otherwise it's a define, or a macro use. */
      char           *cptr;

      lefuc_array(token, uc_token);
      if (strcmp(uc_token, "&ALIAS") == 0)
        lefStoreAlias();  /* read and store the alias */
      else if (strncmp(uc_token, "&DEFINE", 7) == 0) {
        inDefine = 1;    /* it is a define statement */
        break;
      } else if (alias_set && lef_present_in_stringtab(alias_set, token,
          (int **) &cptr ))
        stack[++input_level] = cptr;
      else if (defines_set && lef_present_in_stringtab(defines_set, token,
          (int **) &cptr) && !inDefine)

        /*
           * else if (defines_set && lef_present_in_stringtab(defines_set,
           * token, (int **)&cptr ))
           */
        stack[++input_level] = cptr;
        else
        break;      /* begins with &, but not an &alias defn. or
               * use. */
    } else
      break;      /* does not begin with lefcommentChar or '&' */
  }
  if (ge56almostDone && (strcmp(token, "END") == 0 )) {
    /* Library has BEGINEXT and also end with END LIBRARY */
    /* Use END LIBRARY to indicate the end of the library */
    ge56almostDone = 0;
  }
  if (( doneLib && versionNum < 5.6) ||  /* END LIBRARY is passed for pre 5.6 */
  (ge56almostDone && (strcmp(token, "END" ))) ||  /* after EXT, not */
  /* follow by END */
  (ge56done )) {    /* END LIBRARY is passed for >= 5.6 */
    fc = EOF;
    yyinfo("There are still data after the END LIBRARY");
    return 0;
  }
  if (fc == '\"') {
    yylval.string = ringCopy(&(token[1] ));
    return QSTRING;
  }
  /* at this point we've read a token */
  /* printf("Token is %s\n", token); */
  lefDumbMode--;
  lefNoNum--;
  if (isdigit(fc) || fc == '.' || (fc == '-' && token[1] != '\0' )) {
    char           *ch;

    numVal = yylval.dval = strtod(token, &ch);
    if (lefNoNum < 0 && *ch == '\0') {  /* did we use the whole string? */
      /* check if the integer has exceed the limit */
      if (lefRealNum)    /* this is for PROPERTYDEF with REAL */
        return NUMBER;
      if (( numVal >= leflVal) && (numVal <= lefrVal ))
        return NUMBER;    /* YES, it's really a number */
      else {
        char           *str = (char *) lefMalloc(strlen(token) + 64);

        sprintf(str,
            "***ERROR*** <Number has exceed the limit for an integer> at line %d Last token was <%s>\n",
            lef_nlines, token);
        fflush(stdout);
        lefiError(str);
        free(str);
        lef_errors++;
        return NUMBER;    /* Still return it, so it will continue to
                 * parse */
      }
    } else {      /* failed integer conversion, try floating
             * point */
      yylval.dval = strtol(token, &ch, 10);
      if (lefNoNum < 0 && *ch == '\0')  /* did we use the whole string? */
        return NUMBER;
      else {
        yylval.string = ringCopy(token);  /* NO, it's a string */
        return T_STRING;
      }
    }
  }
  /* 5/17/2004 - Special checking for nondefaultrule */
  if (lefNdRule && (strcmp(token, "END") != 0 )) {
    if (strcmp(token, ndName) == 0) {
      yylval.string = ringCopy(token);  /* a nd rule name */
      return T_STRING;
    } else {
      /* Can be NONDEFAULTRULE END without name, this case, string */
      /* should be a reserve word or name is incorrect */
      /* first check if it is a reserve word */
      lefDumbMode = -1;
    }
  }
  /* if we are dumb mode, all we return is punctuation and strings & numbers */
  /* until we see the next '+' or ';' token */
  if (lefDumbMode >= 0) {
    if (token[1] == '\0' && (fc == '(' || fc == ')' || fc == '+' || fc == ';' || fc == '*' )) {
      if (fc == ';' || fc == '+')
        lefDumbMode = 0;
      return (int) fc;
    }
    if (lefNewIsKeyword && strcmp(token, "NEW") == 0) {
      return K_NEW;    /* even in dumb mode, we must see the NEW
               * token */
    }
    yylval.string = ringCopy(token);
    /* 5/17/2004 - Special checking for nondefaultrule */
    if (lefNdRule) {
      if (strcmp(token, ndName) == 0)
        return T_STRING;
      else {
        /* Can be NONDEFAULTRULE END without name, this case, string */
        /* should be a reserve word or name is incorrect */
        /* first check if it is a reserve word */
      }
    }
    return T_STRING;
  }
  /* if we get here we are in smart mode. Parse token */
  if (isalpha(fc) || fc == '&' || fc == '_') {
    int            *result;

    char           *ch, *uch;

    for (ch = token, uch = uc_token; *ch != '\0'; ch++)
      *uch++ = toupper(*ch);
    *uch = '\0';
    if (Keyword_set &&
        lef_present_in_stringtab(Keyword_set, uc_token, &result )) {
      if (K_HISTORY == *result) {  /* history - get up to ';' */
        int             n;

        int             c;

        int             prev;

        prev = ' ';
        n = 0;
        while (1) {
          c = lefGetc();
          if (c == ';' &&
              (prev == ' ' || prev == '\t' || prev == '\n' ))
            break;
          if (c == '\n') {
            /* call the callback line number function if it is set */
            lef_nlines++;
            if (lefiLineNumberFunction &&
                (lef_nlines % lefiDeltaNumberLines) == 0)
              lefiLineNumberFunction(lef_nlines);
          }
          if (n > history_text_size) {
            history_text_size *= 2;
            if (lefDebug[2])
              printf("Bigger history %d bytes\n", history_text_size);
            Hist_text =
                (char *) lefRealloc(Hist_text, history_text_size + 1);
          }
          prev = Hist_text[n++] = c;
        }
        Hist_text[n] = '\0';
      } else if (K_BEGINEXT == *result) {  /* extension, get up to end */
        int             nn, nn1 = 0;

        int             cc;

        int             foundTag = 0;

        int             notEmpTag = 0;

        int             begQuote = 0;

        nn = 0;
        /* First make sure there is a name after BEGINEXT within quote */
        /* BEGINEXT "name" */
        for (nn = 0, cc = lefGetc();; cc = lefGetc( )) {
          if (cc == EOF)
            break;    /* lef file may not have END LIB */
          if (cc == '\n') {
            if (!foundTag) {
              yyerror("tag is missing for BEGINEXT");
              break;
            }
          } else {
            /* Make sure the tag is quoted */
            if (nn > history_text_size) {
              history_text_size *= 2;
              if (lefDebug[2])
                printf("Bigger history %d bytes\n", history_text_size);
              Hist_text =
                  (char *) lefRealloc(Hist_text, history_text_size + 1);
            }
            Hist_text[nn++] = cc;
            if (cc != ' ') {
              if (cc == '\"') {  /* found a quote */
                if (!begQuote)
/* code folded from here */
  begQuote = 1;
/* unfolding */
                else if (notEmpTag) {
/* code folded from here */
  foundTag = 1;
  break;  /* Found the quoted tag */
/* unfolding */
                } else {
/* code folded from here */
  yyerror("Tag for BEGINEXT is empty");
  break;
/* unfolding */
                }
              } else if (!begQuote) {  /* anything but a quote */
                yyerror("\" is missing in tag");
                break;
              } else  /* anything but a quote and there */
                notEmpTag = 1;  /* is already a quote */
            }
          }
          nn1 = nn + 1;
        }
        if (foundTag) {
          /* We have handle with the tag, just read the rest until */
          /* ENDEXT */
          begQuote = 0;
          for (nn = nn1, cc = lefGetc();; cc = lefGetc( )) {
            if (cc == EOF)
              break;    /* lef file may not have END LIB */
            if (cc == '\n') {
              /* call the callback line number function if it is set */
              lef_nlines++;
              if (lefiLineNumberFunction &&
                  (lef_nlines % lefiDeltaNumberLines) == 0)
                lefiLineNumberFunction(lef_nlines);
            } else if (cc == '\"') {
              if (!begQuote)
                begQuote = 1;
                else
                begQuote = 0;
            }
            if (nn > history_text_size) {
              history_text_size *= 2;
              if (lefDebug[2])
                printf("Bigger history %d bytes\n", history_text_size);
              Hist_text =
                  (char *) lefRealloc(Hist_text, history_text_size + 1);
            }
            Hist_text[nn++] = cc;
            if (DONE_EXT) {
              if (begQuote)
                yyerror("Ending \" is missing");
              break;
            } else if (END_LIB) {
              int             li;

              yyerror("ENDEXT is missing");
              for (li = nn - 1; li > nn - 12; li--)
                UNlefGetc(Hist_text[li]);
              return 1;
            }
          }
        }
        Hist_text[nn] = '\0';
      }
      return *result;    /* YES, return its value */
    } else {      /* we don't have a keyword. */
      if (fc == '&')
        return lefamper_lookup(token);
      yylval.string = ringCopy(token);  /* NO, it's a string */
      return T_STRING;
    }
  } else {      /* it should be a punctuation character */
    if (token[1] != '\0') {
      if (strcmp(token, ">=") == 0)
        return K_GE;
      if (strcmp(token, "<=") == 0)
        return K_LE;
      if (strcmp(token, "<>") == 0)
        return K_NE;
      if (token[0] == ';') {  /* we got ';TOKEN' which is not allowed by */
        strcpy(saved_token, &token[1]);  /* the standard syntax, but */
        stack[++input_level] = saved_token;  /* C3 and GE support. */
      } else if (token[0] == '_') {  /* name starts with _, return as
                 * T_STRING */
        yylval.string = ringCopy(token);
        return T_STRING;
      } else {
        printf("Odd punctuation at line %d, token %s\n",
            lef_nlines, token);
        printf("Token after punctuation ignored.\n");
      }
    }
    return (int) token[0];
  }
}

/*
 * We have found a token beginning with '&'. If it has been previously
 * defined, substitute the definition. Otherwise return it.
 */
int 
lefamper_lookup(char *tkn)
{
  double         *dptr;

  int            *result;

  char           *cptr;

  /* printf("Amper_lookup: %s\n", tkn); */
  /* &define returns a number */
  if (define_set && lef_present_in_stringtab(define_set, tkn, (int **) &dptr )) {
    yylval.dval = *dptr;
    return NUMBER;
  }
  /* &defineb returns TRUE or FALSE, encoded as K_TRUE or K_FALSE */
  if (defineb_set && lef_present_in_stringtab(defineb_set, tkn, &result ))
    return *result;
  /* &defines returns a T_STRING */
  if (defines_set && lef_present_in_stringtab(defines_set, tkn, (int **) &cptr )) {
    if (Keyword_set && lef_present_in_stringtab(Keyword_set, cptr, &result ))
      return (*result);
    yylval.string = ringCopy(cptr);
    return (cptr[0] == '\"' ? QSTRING : T_STRING);
  }
  /* if none of the above, just return the token. */
  yylval.string = ringCopy(tkn);
  return T_STRING;
}

void 
yyerror(const char *s)
{
  char           *str;

  int             len = strlen(token) - 1;

  int             pvLen = strlen(pv_token) - 1;

  /* PCR 690679, probably missing space before a ';' */
  if (strcmp(s, "parse error") == 0) {
    if (( len > 1) && (token[len] == ';' )) {
      str = (char *) lefMalloc(strlen(token) + strlen(s) + 100);
      sprintf(str, "***ERROR*** <%s> at line %d\nLast token was <%s>, space is missing before <;>\n",
          s, lef_nlines, token);
    } else if (( pvLen > 1) && (pv_token[pvLen] == ';' )) {
      str = (char *) lefMalloc(strlen(pv_token) + strlen(s) + 100);
      sprintf(str, "***ERROR*** <%s> at line %d\nLast token was <%s>, space is missing before <;>\n",
          s, lef_nlines - 1, pv_token);
    } else {
      str = (char *) lefMalloc(strlen(token) + strlen(s) + 64);
      sprintf(str, "***ERROR*** <%s> at line %d\nLast token was <%s>\n",
          s, lef_nlines, token);
    }
  } else {
    str = (char *) lefMalloc(strlen(token) + strlen(s) + 64);
    sprintf(str, "***ERROR*** <%s> at line %d\nLast token was <%s>\n",
        s, lef_nlines, token);
  }
  fflush(stdout);
  lefiError(str);
  free(str);
  lef_errors++;
}

extern LEFI_WARNING_LOG_FUNCTION lefiWarningLogFunction;

void
yyinfo(const char *s)
{
  if (lefiWarningLogFunction) {
    char           *str = (char *) lefMalloc(strlen(token) + strlen(s) + 64);

    sprintf(str, "***INFO*** <%s> at line %d. Last token was <%s>\n",
        s, lef_nlines, token);
    (*lefiWarningLogFunction) (str);
    free(str);
  } else if (lefrLog) {
    fprintf(lefrLog, "***INFO*** <%s> at line %d\n", s, lef_nlines);
    fprintf(lefrLog, "Last token was <%s>\n", token);
  } else {
    if (!hasOpenedLogFile) {
      if (( lefrLog = fopen("lefRWarning.log", "w" )) == 0) {
        printf("WARNING: Unable to open the file lefRWarning.log in %s.\n",
            getcwd(NULL, 64 ));
        printf("Info messages will not be printed.\n");
      } else {
        hasOpenedLogFile = 1;
        fprintf(lefrLog, "Info from file: %s\n\n", lefrFileName);
        fprintf(lefrLog, "***INFO*** <%s> at line %d\n", s, lef_nlines);
        fprintf(lefrLog, "Last token was <%s>\n", token);
      }
    } else {
      if (( lefrLog = fopen("lefRWarning.log", "a" )) == 0) {
        printf("WARNING: Unable to open the file lefRWarning.log in %s.\n",
            getcwd(NULL, 64 ));
        printf("Info messages will not be printed.\n");
      } else {
        fprintf(lefrLog, "\nInfo from file: %s\n\n", lefrFileName);
        fprintf(lefrLog, "***INFO*** <%s> at line %d\n", s, lef_nlines);
        fprintf(lefrLog, "Last token was <%s>\n", token);
      }
    }
  }
}

void 
yywarning(const char *s)
{
  if (lefiWarningLogFunction) {
    char           *str = (char *) lefMalloc(strlen(token) + strlen(s) + 64);

    sprintf(str, "***WARNING*** <%s> at line %d. Last token was <%s>\n",
        s, lef_nlines, token);
    (*lefiWarningLogFunction) (str);
    free(str);
  } else if (lefrLog) {
    fprintf(lefrLog, "***WARNING*** <%s> at line %d\n", s, lef_nlines);
    fprintf(lefrLog, "Last token was <%s>\n", token);
  } else {
    if (!hasOpenedLogFile) {
      if (( lefrLog = fopen("lefRWarning.log", "w" )) == 0) {
        printf("WARNING: Unable to open the file lefRWarning.log in %s.\n",
            getcwd(NULL, 64 ));
        printf("Warning messages will not be printed.\n");
      } else {
        hasOpenedLogFile = 1;
        fprintf(lefrLog, "Warnings from file: %s\n\n", lefrFileName);
        fprintf(lefrLog, "***WARNING*** <%s> at line %d\n", s, lef_nlines);
        fprintf(lefrLog, "Last token was <%s>\n", token);
      }
    } else {
      if (( lefrLog = fopen("lefRWarning.log", "a" )) == 0) {
        printf("WARNING: Unable to open the file lefRWarning.log in %s.\n",
            getcwd(NULL, 64 ));
        printf("Warning messages will not be printed.\n");
      } else {
        fprintf(lefrLog, "\nWarnings from file: %s\n\n", lefrFileName);
        fprintf(lefrLog, "***WARNING*** <%s> at line %d\n", s, lef_nlines);
        fprintf(lefrLog, "Last token was <%s>\n", token);
      }
    }
  }
  lef_warnings++;
}

extern LEFI_MALLOC_FUNCTION lefiMallocFunction;

void           *
lefMalloc(int lef_size)
{
  void           *mallocVar;

  if (lefiMallocFunction)
    return (*lefiMallocFunction) (lef_size);
  else {
    mallocVar = (void *) malloc(lef_size);
    if (!mallocVar) {
      fprintf(stderr, "Not enough memory, stop parsing!\n");
      exit(1);
    }
    return mallocVar;
  }
}

extern LEFI_REALLOC_FUNCTION lefiReallocFunction;

void           *
lefRealloc(void *name, int lef_size)
{
  if (lefiReallocFunction)
    return (*lefiReallocFunction) (name, lef_size);
    else
    return (void *) realloc(name, lef_size);
}

extern LEFI_FREE_FUNCTION lefiFreeFunction;

void 
lefFree(void *name)
{
  if (lefiFreeFunction)
    (*lefiFreeFunction) (name);
    else
    free(name);
}

char           *
lefaddr(const char *in)
{
  return (char *) in;
}

void
lefSetNonDefault(const char *nd_name)
{
  ndName = strdup(nd_name);
}

void
lefUnsetNonDefault()
{
  lefNdRule = 0;
  free(ndName);
}

char           *
lef_kywd(int num)
{
  char           *a;

  switch (num) {
  case K_HISTORY:
    a = lefaddr("HISTORY");
    break;
  case K_ABUT:
    a = lefaddr("ABUT");
    break;
  case K_ABUTMENT:
    a = lefaddr("ABUTMENT");
    break;
  case K_ACTIVE:
    a = lefaddr("ACTIVE");
    break;
  case K_ANALOG:
    a = lefaddr("ANALOG");
    break;
  case K_ANTENNAAREAFACTOR:
    a = lefaddr("ANTENNAAREAFACTOR");
    break;
  case K_ANTENNALENGTHFACTOR:
    a = lefaddr("ANTENNALENGTHFACTOR");
    break;
  case K_ARRAY:
    a = lefaddr("ARRAY");
    break;
  case K_BLOCK:
    a = lefaddr("BLOCK");
    break;
  case K_BOTTOMLEFT:
    a = lefaddr("BOTTOMLEFT");
    break;
  case K_BOTTOMRIGHT:
    a = lefaddr("BOTTOMRIGHT");
    break;
  case K_BUFFER:
    a = lefaddr("BUFFER");
    break;
  case K_BY:
    a = lefaddr("BY");
    break;
  case K_CAPACITANCE:
    a = lefaddr("CAPACITANCE");
    break;
  case K_CAPMULTIPLIER:
    a = lefaddr("CAPMULTIPLIER");
    break;
  case K_CLASS:
    a = lefaddr("CLASS");
    break;
  case K_CLOCK:
    a = lefaddr("CLOCK");
    break;
  case K_COLUMNMAJOR:
    a = lefaddr("COLUMNMAJOR");
    break;
  case K_CORE:
    a = lefaddr("CORE");
    break;
  case K_CORNER:
    a = lefaddr("CORNER");
    break;
  case K_COVER:
    a = lefaddr("COVER");
    break;
  case K_CPERSQDIST:
    a = lefaddr("CPERSQDIST");
    break;
  case K_CURRENT:
    a = lefaddr("CURRENT");
    break;
  case K_CURRENTDEN:
    a = lefaddr("CURRENTDEN");
    break;
  case K_CURRENTSOURCE:
    a = lefaddr("CURRENTSOURCE");
    break;
  case K_CUT:
    a = lefaddr("CUT");
    break;
  case K_DEFAULT:
    a = lefaddr("DEFAULT");
    break;
  case K_DATABASE:
    a = lefaddr("DATABASE");
    break;
  case K_DIELECTRIC:
    a = lefaddr("DIELECTRIC");
    break;
  case K_DIRECTION:
    a = lefaddr("DIRECTION");
    break;
  case K_DO:
    a = lefaddr("DO");
    break;
  case K_EDGECAPACITANCE:
    a = lefaddr("EDGECAPACITANCE");
    break;
  case K_EEQ:
    a = lefaddr("EEQ");
    break;
  case K_END:
    a = lefaddr("END");
    break;
  case K_ENDCAP:
    a = lefaddr("ENDCAP");
    break;
  case K_FALL:
    a = lefaddr("FALL");
    break;
  case K_FALLCS:
    a = lefaddr("FALLCS");
    break;
  case K_FALLT0:
    a = lefaddr("FALLT0");
    break;
  case K_FALLSATT1:
    a = lefaddr("FALLSATT1");
    break;
  case K_FALLRS:
    a = lefaddr("FALLRS");
    break;
  case K_FALLSATCUR:
    a = lefaddr("FALLSATCUR");
    break;
  case K_FALLTHRESH:
    a = lefaddr("FALLTHRESH");
    break;
  case K_FEEDTHRU:
    a = lefaddr("FEEDTHRU");
    break;
  case K_FIXED:
    a = lefaddr("FIXED");
    break;
  case K_FOREIGN:
    a = lefaddr("FOREIGN");
    break;
  case K_FROMPIN:
    a = lefaddr("FROMPIN");
    break;
  case K_FUNCTION:
    a = lefaddr("FUNCTION");
    break;
  case K_GENERATE:
    a = lefaddr("GENERATE");
    break;
  case K_GENERATOR:
    a = lefaddr("GENERATOR");
    break;
  case K_GROUND:
    a = lefaddr("GROUND");
    break;
  case K_HEIGHT:
    a = lefaddr("HEIGHT");
    break;
  case K_HORIZONTAL:
    a = lefaddr("HORIZONTAL");
    break;
  case K_INOUT:
    a = lefaddr("INOUT");
    break;
  case K_INPUT:
    a = lefaddr("INPUT");
    break;
  case K_INPUTNOISEMARGIN:
    a = lefaddr("INPUTNOISEMARGIN");
    break;
  case K_COMPONENTPIN:
    a = lefaddr("COMPONENTPIN");
    break;
  case K_INTRINSIC:
    a = lefaddr("INTRINSIC");
    break;
  case K_INVERT:
    a = lefaddr("INVERT");
    break;
  case K_INVERTER:
    a = lefaddr("INVERTER");
    break;
  case K_IRDROP:
    a = lefaddr("IRDROP");
    break;
  case K_ITERATE:
    a = lefaddr("ITERATE");
    break;
  case K_IV_TABLES:
    a = lefaddr("IV_TABLES");
    break;
  case K_LAYER:
    a = lefaddr("LAYER");
    break;
  case K_LEAKAGE:
    a = lefaddr("LEAKAGE");
    break;
  case K_LEQ:
    a = lefaddr("LEQ");
    break;
  case K_LIBRARY:
    a = lefaddr("LIBRARY");
    break;
  case K_MACRO:
    a = lefaddr("MACRO");
    break;
  case K_MATCH:
    a = lefaddr("MATCH");
    break;
  case K_MAXDELAY:
    a = lefaddr("MAXDELAY");
    break;
  case K_MAXLOAD:
    a = lefaddr("MAXLOAD");
    break;
  case K_METALOVERHANG:
    a = lefaddr("METALOVERHANG");
    break;
  case K_MILLIAMPS:
    a = lefaddr("MILLIAMPS");
    break;
  case K_MILLIWATTS:
    a = lefaddr("MILLIWATTS");
    break;
  case K_MINFEATURE:
    a = lefaddr("MINFEATURE");
    break;
  case K_MUSTJOIN:
    a = lefaddr("MUSTJOIN");
    break;
  case K_NAMEMAPSTRING:
    a = lefaddr("NAMEMAPSTRING");
    break;
  case K_NAMESCASESENSITIVE:
    a = lefaddr("NAMESCASESENSITIVE");
    break;
  case K_NANOSECONDS:
    a = lefaddr("NANOSECONDS");
    break;
  case K_NETS:
    a = lefaddr("NETS");
    break;
  case K_NEW:
    a = lefaddr("NEW");
    break;
  case K_NONDEFAULTRULE:
    a = lefaddr("NONDEFAULTRULE");
    break;
  case K_NONINVERT:
    a = lefaddr("NONINVERT");
    break;
  case K_NONUNATE:
    a = lefaddr("NONUNATE");
    break;
  case K_NOWIREEXTENSIONATPIN:
    a = lefaddr("NOWIREEXTENSIONATPIN");
    break;
  case K_OBS:
    a = lefaddr("OBS");
    break;
  case K_OHMS:
    a = lefaddr("OHMS");
    break;
  case K_OFFSET:
    a = lefaddr("OFFSET");
    break;
  case K_ORIENTATION:
    a = lefaddr("ORIENTATION");
    break;
  case K_ORIGIN:
    a = lefaddr("ORIGIN");
    break;
  case K_OUTPUT:
    a = lefaddr("OUTPUT");
    break;
  case K_OUTPUTNOISEMARGIN:
    a = lefaddr("OUTPUTNOISEMARGIN");
    break;
  case K_OUTPUTRESISTANCE:
    a = lefaddr("OUTPUTRESISTANCE");
    break;
  case K_OVERHANG:
    a = lefaddr("OVERHANG");
    break;
  case K_OVERLAP:
    a = lefaddr("OVERLAP");
    break;
  case K_OFF:
    a = lefaddr("OFF");
    break;
  case K_ON:
    a = lefaddr("ON");
    break;
  case K_OVERLAPS:
    a = lefaddr("OVERLAPS");
    break;
  case K_PAD:
    a = lefaddr("PAD");
    break;
  case K_PATH:
    a = lefaddr("PATH");
    break;
  case K_PATTERN:
    a = lefaddr("PATTERN");
    break;
  case K_PICOFARADS:
    a = lefaddr("PICOFARADS");
    break;
  case K_PIN:
    a = lefaddr("PIN");
    break;
  case K_PITCH:
    a = lefaddr("PITCH");
    break;
  case K_PLACED:
    a = lefaddr("PLACED");
    break;
  case K_POLYGON:
    a = lefaddr("POLYGON");
    break;
  case K_PORT:
    a = lefaddr("PORT");
    break;
  case K_POST:
    a = lefaddr("POST");
    break;
  case K_POWER:
    a = lefaddr("POWER");
    break;
  case K_PRE:
    a = lefaddr("PRE");
    break;
  case K_PULLDOWNRES:
    a = lefaddr("PULLDOWNRES");
    break;
  case K_PWL:
    a = lefaddr("PWL");
    break;
  case K_RECT:
    a = lefaddr("RECT");
    break;
  case K_RESISTANCE:
    a = lefaddr("RESISTANCE");
    break;
  case K_RESISTIVE:
    a = lefaddr("RESISTIVE");
    break;
  case K_RING:
    a = lefaddr("RING");
    break;
  case K_RISE:
    a = lefaddr("RISE");
    break;
  case K_RISECS:
    a = lefaddr("RISECS");
    break;
  case K_RISERS:
    a = lefaddr("RISERS");
    break;
  case K_RISESATCUR:
    a = lefaddr("RISESATCUR");
    break;
  case K_RISETHRESH:
    a = lefaddr("RISETHRESH");
    break;
  case K_RISESATT1:
    a = lefaddr("RISESATT1");
    break;
  case K_RISET0:
    a = lefaddr("RISET0");
    break;
  case K_RISEVOLTAGETHRESHOLD:
    a = lefaddr("RISEVOLTAGETHRESHOLD");
    break;
  case K_FALLVOLTAGETHRESHOLD:
    a = lefaddr("FALLVOLTAGETHRESHOLD");
    break;
  case K_ROUTING:
    a = lefaddr("ROUTING");
    break;
  case K_ROWMAJOR:
    a = lefaddr("ROWMAJOR");
    break;
  case K_RPERSQ:
    a = lefaddr("RPERSQ");
    break;
  case K_SAMENET:
    a = lefaddr("SAMENET");
    break;
  case K_SCANUSE:
    a = lefaddr("SCANUSE");
    break;
  case K_SHAPE:
    a = lefaddr("SHAPE");
    break;
  case K_SHRINKAGE:
    a = lefaddr("SHRINKAGE");
    break;
  case K_SIGNAL:
    a = lefaddr("SIGNAL");
    break;
  case K_SITE:
    a = lefaddr("SITE");
    break;
  case K_SIZE:
    a = lefaddr("SIZE");
    break;
  case K_SOURCE:
    a = lefaddr("SOURCE");
    break;
  case K_SPACER:
    a = lefaddr("SPACER");
    break;
  case K_SPACING:
    a = lefaddr("SPACING");
    break;
  case K_SPECIALNETS:
    a = lefaddr("SPECIALNETS");
    break;
  case K_STACK:
    a = lefaddr("STACK");
    break;
  case K_START:
    a = lefaddr("START");
    break;
  case K_STEP:
    a = lefaddr("STEP");
    break;
  case K_STOP:
    a = lefaddr("STOP");
    break;
  case K_STRUCTURE:
    a = lefaddr("STRUCTURE");
    break;
  case K_SYMMETRY:
    a = lefaddr("SYMMETRY");
    break;
  case K_TABLE:
    a = lefaddr("TABLE");
    break;
  case K_THICKNESS:
    a = lefaddr("THICKNESS");
    break;
  case K_TIEHIGH:
    a = lefaddr("TIEHIGH");
    break;
  case K_TIELOW:
    a = lefaddr("TIELOW");
    break;
  case K_TIEOFFR:
    a = lefaddr("TIEOFFR");
    break;
  case K_TIME:
    a = lefaddr("TIME");
    break;
  case K_TIMING:
    a = lefaddr("TIMING");
    break;
  case K_TO:
    a = lefaddr("TO");
    break;
  case K_TOPIN:
    a = lefaddr("TOPIN");
    break;
  case K_TOPLEFT:
    a = lefaddr("TOPLEFT");
    break;
  case K_TOPRIGHT:
    a = lefaddr("TOPRIGHT");
    break;
  case K_TOPOFSTACKONLY:
    a = lefaddr("TOPOFSTACKONLY");
    break;
  case K_TRISTATE:
    a = lefaddr("TRISTATE");
    break;
  case K_TYPE:
    a = lefaddr("TYPE");
    break;
  case K_UNATENESS:
    a = lefaddr("UNATENESS");
    break;
  case K_UNITS:
    a = lefaddr("UNITS");
    break;
  case K_USE:
    a = lefaddr("USE");
    break;
  case K_VARIABLE:
    a = lefaddr("VARIABLE");
    break;
  case K_VERTICAL:
    a = lefaddr("VERTICAL");
    break;
  case K_VHI:
    a = lefaddr("VHI");
    break;
  case K_VIA:
    a = lefaddr("VIA");
    break;
  case K_VIARULE:
    a = lefaddr("VIARULE");
    break;
  case K_VLO:
    a = lefaddr("VLO");
    break;
  case K_VOLTAGE:
    a = lefaddr("VOLTAGE");
    break;
  case K_VOLTS:
    a = lefaddr("VOLTS");
    break;
  case K_WIDTH:
    a = lefaddr("WIDTH");
    break;
  case K_WIREEXTENSION:
    a = lefaddr("WIREEXTENSION");
    break;
  case K_X:
    a = lefaddr("X");
    break;
  case K_Y:
    a = lefaddr("Y");
    break;
  case K_R90:
    a = lefaddr("R90");
    break;
  case T_STRING:
    a = lefaddr("T_STRING");
    break;
  case QSTRING:
    a = lefaddr("QSTRING");
    break;
  case NUMBER:
    a = lefaddr("NUMBER");
    break;
  case K_N:
    a = lefaddr("N");
    break;
  case K_S:
    a = lefaddr("S");
    break;
  case K_E:
    a = lefaddr("E");
    break;
  case K_W:
    a = lefaddr("W");
    break;
  case K_FN:
    a = lefaddr("FN");
    break;
  case K_FS:
    a = lefaddr("FS");
    break;
  case K_FE:
    a = lefaddr("FE");
    break;
  case K_FW:
    a = lefaddr("FW");
    break;
  case K_USER:
    a = lefaddr("USER");
    break;
  case K_MASTERSLICE:
    a = lefaddr("MASTERSLICE");
    break;
  case K_ENDMACRO:
    a = lefaddr("ENDMACRO");
    break;
  case K_ENDMACROPIN:
    a = lefaddr("ENDMACROPIN");
    break;
  case K_ENDVIARULE:
    a = lefaddr("ENDVIARULE");
    break;
  case K_ENDVIA:
    a = lefaddr("ENDVIA");
    break;
  case K_ENDLAYER:
    a = lefaddr("ENDLAYER");
    break;
  case K_ENDSITE:
    a = lefaddr("ENDSITE");
    break;
  case K_CANPLACE:
    a = lefaddr("CANPLACE");
    break;
  case K_CANNOTOCCUPY:
    a = lefaddr("CANNOTOCCUPY");
    break;
  case K_TRACKS:
    a = lefaddr("TRACKS");
    break;
  case K_FLOORPLAN:
    a = lefaddr("FLOORPLAN");
    break;
  case K_GCELLGRID:
    a = lefaddr("GCELLGRID");
    break;
  case K_DEFAULTCAP:
    a = lefaddr("DEFAULTCAP");
    break;
  case K_MINPINS:
    a = lefaddr("MINPINS");
    break;
  case K_WIRECAP:
    a = lefaddr("WIRECAP");
    break;
  case K_STABLE:
    a = lefaddr("STABLE");
    break;
  case K_SETUP:
    a = lefaddr("SETUP");
    break;
  case K_HOLD:
    a = lefaddr("HOLD");
    break;
  case K_DEFINE:
    a = lefaddr("DEFINE");
    break;
  case K_DEFINES:
    a = lefaddr("DEFINES");
    break;
  case K_DEFINEB:
    a = lefaddr("DEFINEB");
    break;
  case K_IF:
    a = lefaddr("IF");
    break;
  case K_THEN:
    a = lefaddr("THEN");
    break;
  case K_ELSE:
    a = lefaddr("ELSE");
    break;
  case K_FALSE:
    a = lefaddr("FALSE");
    break;
  case K_TRUE:
    a = lefaddr("TRUE");
    break;
  case K_EQ:
    a = lefaddr("EQ");
    break;
  case K_NE:
    a = lefaddr("NE");
    break;
  case K_LE:
    a = lefaddr("LE");
    break;
  case K_LT:
    a = lefaddr("LT");
    break;
  case K_GE:
    a = lefaddr("GE");
    break;
  case K_GT:
    a = lefaddr("GT");
    break;
  case K_OR:
    a = lefaddr("OR");
    break;
  case K_AND:
    a = lefaddr("AND");
    break;
  case K_NOT:
    a = lefaddr("NOT");
    break;
  case K_DELAY:
    a = lefaddr("DELAY");
    break;
  case K_TABLEDIMENSION:
    a = lefaddr("TABLEDIMENSION");
    break;
  case K_TABLEAXIS:
    a = lefaddr("TABLEAXIS");
    break;
  case K_TABLEENTRIES:
    a = lefaddr("TABLEENTRIES");
    break;
  case K_TRANSITIONTIME:
    a = lefaddr("TRANSITIONTIME");
    break;
  case K_EXTENSION:
    a = lefaddr("EXTENSION");
    break;
  case K_PROPDEF:
    a = lefaddr("PROPDEF");
    break;
  case K_STRING:
    a = lefaddr("STRING");
    break;
  case K_INTEGER:
    a = lefaddr("INTEGER");
    break;
  case K_REAL:
    a = lefaddr("REAL");
    break;
  case K_RANGE:
    a = lefaddr("RANGE");
    break;
  case K_PROPERTY:
    a = lefaddr("PROPERTY");
    break;
  case K_VIRTUAL:
    a = lefaddr("VIRTUAL");
    break;
  case K_BUSBITCHARS:
    a = lefaddr("BUSBITCHARS");
    break;
  case K_VERSION:
    a = lefaddr("VERSION");
    break;
  case K_BEGINEXT:
    a = lefaddr("BEGINEXT");
    break;
  case K_ENDEXT:
    a = lefaddr("ENDEXT");
    break;
  case K_UNIVERSALNOISEMARGIN:
    a = lefaddr("UNIVERSALNOISEMARGIN");
    break;
  case K_EDGERATETHRESHOLD1:
    a = lefaddr("EDGERATETHRESHOLD1");
    break;
  case K_CORRECTIONTABLE:
    a = lefaddr("CORRECTIONTABLE");
    break;
  case K_EDGERATESCALEFACTOR:
    a = lefaddr("EDGERATESCALEFACTOR");
    break;
  case K_EDGERATETHRESHOLD2:
    a = lefaddr("EDGERATETHRESHOLD2");
    break;
  case K_VICTIMNOISE:
    a = lefaddr("VICTIMNOISE");
    break;
  case K_NOISETABLE:
    a = lefaddr("NOISETABLE");
    break;
  case K_EDGERATE:
    a = lefaddr("EDGERATE");
    break;
  case K_VICTIMLENGTH:
    a = lefaddr("VICTIMLENGTH");
    break;
  case K_CORRECTIONFACTOR:
    a = lefaddr("CORRECTIONFACTOR");
    break;
  case K_OUTPUTPINANTENNASIZE:
    a = lefaddr("OUTPUTPINANTENNASIZE");
    break;
  case K_INPUTPINANTENNASIZE:
    a = lefaddr("INPUTPINANTENNASIZE");
    break;
  case K_INOUTPINANTENNASIZE:
    a = lefaddr("INOUTPINANTENNASIZE");
    break;
  case K_TAPERRULE:
    a = lefaddr("TAPERRULE");
    break;
  case K_DIVIDERCHAR:
    a = lefaddr("DIVIDERCHAR");
    break;
  case K_ANTENNASIZE:
    a = lefaddr("ANTENNASIZE");
    break;
  case K_ANTENNAMETALAREA:
    a = lefaddr("ANTENNAMETALAREA");
    break;
  case K_ANTENNAMETALLENGTH:
    a = lefaddr("ANTENNAMETALLENGTH");
    break;
  case K_RISESLEWLIMIT:
    a = lefaddr("RISESLEWLIMIT");
    break;
  case K_FALLSLEWLIMIT:
    a = lefaddr("FALLSLEWLIMIT");
    break;
  case K_MESSAGE:
    a = lefaddr("MESSAGE");
    break;
  case K_CREATEFILE:
    a = lefaddr("CREATEFILE");
    break;
  case K_OPENFILE:
    a = lefaddr("OPENFILE");
    break;
  case K_CLOSEFILE:
    a = lefaddr("CLOSEFILE");
    break;
  case K_WARNING:
    a = lefaddr("WARNING");
    break;
  case K_ERROR:
    a = lefaddr("ERROR");
    break;
  case K_FATALERROR:
    a = lefaddr("FATALERROR");
    break;
  case IF:
    a = lefaddr("IF");
    break;
  case LNOT:
    a = lefaddr("LNOT");
    break;
  case UMINUS:
    a = lefaddr("UMINUS");
    break;
  default:
    a = lefaddr("bogus");
  }
  return a;
}
