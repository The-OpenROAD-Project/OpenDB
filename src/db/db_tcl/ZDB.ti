#
# BSD 3-Clause License
#
# Copyright (c) 2019, Nefelus Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%{
#include "ZDB.h"
%}

/** 
 * Database technology module.
 * This module provides basic operations on database objects.
 */
module ZDB "DB"
{
    /**
     * This variable changes the buffer size for read and write operations to channels.
     */
    export string bufsize [ usage = "sizeof read/write buffer (1024, 1K, 1M)"; notify = bufsizeChange; ];

    /**
     * This method creates a new DB module.
     */
    constructor
    ( 
        in dbobject duplicate [ usage = "database"; ],
        out dbobject db [ usage = "database"; ]
    );
 
    /**
     * This method finds named objects in this database.
     */
    export find
    ( 
        in string lib [ usage = "find library of database"; ],
        in string bterm [ usage = "find bterm of block"; ],
        in string net [ usage = "find net of block"; ],
        in string inst [ usage = "find inst of block"; ],
        in string block [ usage = "find child block of top-block"; ],
        out dbobject object [ usage = "database object or NULL if not found"; ]
    );

    /**
     * This method will get the specified object from this database.
     */
    export get
    ( 
        in bool db [ usage = "get database"; ],
        in bool chip [ usage = "get database chip"; ],
        in bool tech [ usage = "get database tech"; ],
        in bool top [ usage = "get top block of chip "; ],
        out list dbobject children [ usage = "children of a top or dbBlock"; ],
        out dbobject object [ usage = "database object or NULL if not found"; ]
    );

    /**
     * This method will print sequences of slack numbers as traced on DB
     */
    export timing_info
    ( 
        in bool init [ usage = "reset a tmg index as propetry counter in DB"; ],
        in bool reset [ usage = "delete all previues slack properties in DB"; ],
        in bool min [ usage = "max/min"; ],
        in bool tns [ usage = "wns/tns"; ],
        in string file [ usage = "output file name"; ]
    );

    /**
     * This method will get the specified list of dbBlocks from this database.
     */
    export get_children
    ( 
        in bool chip [ usage = "get database chip"; ],
        in bool top [ usage = "get top block of chip "; ],
        in dbobject block [ usage = "get block of chip "; ],
        in string block_name [ usage = "get block of chip "; ],
        out string block_name_list [ usage = "names of children of a top/chip/block"; ],
        out list dbobject block_list [ usage = "children of a top/chip/block"; ]
    );
    /**
     * This method flags cells without class and/or site
     * 
     */
    export check_lef_sites
    ( 
    );

    /**
     * This method will set a default user site name for cells without site
     * definition
     */
    export default_class_site
    ( 
        in string class_name = "CORE"  [ usage = "target cell class name"; ],
        in string site_name = ""  [ usage = "site name"; ]

    );
    /**
     * This method will load the specified LEF file into this database.
     */
    export load_lef
    ( 
        in string file = "lef"  [ usage = "lef file"; ],
        in list string list_file [ usage = "lef file list"; ],
        in list string target_def_list_file [ usage = "lef file list"; ],
        in string lib = "lib"  [ usage = "library name"; ],
        in bool notech [ usage = "do not create technology"; ],
        in bool techonly [ usage = "only create technology"; ],
        in bool noobs [ usage = "do not read macro obstructions"; ],
        in bool update [ usage = "add macros to library"; ],
        in bool ignore_non_routing_layers [ usage = "skip all layers in technology and macro sections that are not ROUTING or CUT"; ],
        in int dbu_per_micron = 0 [ usage = "set the db units per micron; must be >= (LEF DATABASE MICRON) value"; ]
    );

    /**
     * This method will load the specified DEF file into this database.
     */
    export load_def
    (
        in string file = "def"  [ usage = "def file"; ],
        in bool nowires [ usage = "do not load regular wires"; ],
        in bool noconns [ usage = "do not load logical connectivity "; ],
        in bool nospcwires [ usage = "do not load special wires"; ],
        in bool noshields [ usage = "do not load shield wires"; ],
        in bool noblockwires [ usage = "do not load BLOCKWIRE special wires"; ],
        in bool nofillwires [ usage = "do not load FILLWIRE special wires"; ],
        in string name [ usage = "block name, overides Def DESIGN stmt"; ],
        in dbobject block [ usage = "parent block"; ],
        in string instance [ usage = "parent instance"; ]
    );
    /**
     * This method will bind an instance block to an existing block
     */
    export bind_block
    (
        in string block_name [ usage = "parent block master name"; ],
        in dbobject block [ usage = "parent block"; ],
        in bool force [ usage = "Overide existing binding"; ],
        in string instance [ usage = "parent instance"; ]
    );
    /**
     * This method will reset hierarchy to all instances of a block
     */
    export reset_inst_hier
    (
        in string block_name [ usage = "parent block master name"; ],
        in dbobject block [ usage = "parent block"; ],
        in bool top [ usage = "top block"; ],
        in string instance [ usage = "parent instance"; ]
    );

    /**
     * This method will load the specified DEF file and update the database.
     */
    export load_def_eco
    (
        in string file = "def"  [ usage = "def file"; ],
        in bool nowires [ usage = "do not load regular wires"; ],
        in bool nospcwires [ usage = "do not load special wires"; ],
        in bool noshields [ usage = "do not load shield wires"; ],
        in bool noblockwires [ usage = "do not load BLOCKWIRE special wires"; ],
        in bool nofillwires [ usage = "do not load FILLWIRE special wires"; ],
        in bool replacewires [ usage = "replace the routing"; ],
        in bool assemblewires [ usage = "merge routing in file with existing routing in block"; ],
        in bool id2names [ usage = "DEF names are ids, map id to internal name"; ],
        in dbobject block [ usage = "block to apply ECO"; ]
    );

    /**
     * This method will save the database library to the specified LEF file.
     */
    export save_lef
    ( 
        in string file = "out.lef"  [ usage = "lef file"; ],
        in string lib = "lib"  [ usage = "library name"; ],
        in bool notech [ usage = "do not save technology data"; ],
        in bool usemasterids [ usage = "write master names using integer ids"; ],
        in string layermap [ usage = "remap layer names using this mapping file"; ]
    );

    /**
     * This method will save the database block to the specified DEF file.
     */
    export save_def
    (
        in string file = "out.def"  [ usage = "def file"; ],
        in bool use_ids [ usage = "rename insts, nets, bterms, masters, and mterms using ids"; ],
        in bool usemasterids [ usage = "write master names using integer ids"; ],
        in string net [ usage = "save def for this nets only"; ],
        in list int list_net_id [ usage = "save def for these net only"; ],
        in bool cc_partner [ usage = "include coupling cap nets"; ],
        in bool net_of_inst [ usage = "include nets of instance for verilog bus"; ],
        in bool mini_lef [ usage = "save partial lef to support reading partial def"; ],
        in dbobject block [ usage = "save def of this block"; ],
        in string block_inst [ usage = "inst name of hierarchical block"; ],
        in string layermap [ usage = "remap layer names using this mapping file"; ],
        in string version = "5.3" [ usage = "DEF version(5.3 - 5.6)"; ]
    );

    /**
     * This method will read a database from the specified IO stream.
     */
    export read
    ( 
        in string file = "ads.db"  [ usage = "file"; ],
        in ichannel channel [ usage = "read stream"; ],
        in bool tech  [ usage = "read this tech"; ],
        in dbobject lib  [ usage = "read this lib"; ],
        in dbobject block  [ usage = "read this block"; ],
        in bool chip  [ usage = "read this chip"; ],
        in bool libs  [ usage = "read all libraries"; ],
        in bool wires  [ usage = "read the wires of this block"; ],
        in bool nets  [ usage = "read the nets of this block"; ],
        in bool parasitics  [ usage = "read the parasitics of this block"; ],
        in bool no_nets [usage = "do not read nets when reading parasitics"; ]
    );

    /**
     * This method will write this database to the specified IO stream.
     */
    export write
    ( 
        in string file = "ads.db"  [ usage = "file"; ],
        in ochannel channel [ usage = "write stream"; ],
        in bool tech  [ usage = "write this tech"; ],
        in dbobject lib  [ usage = "write this lib"; ],
        in dbobject block  [ usage = "write this block"; ],
        in bool skip_hier_refs  [ usage = "skip references to children blocks"; ],
        in bool chip  [ usage = "write this chip"; ],
        in bool libs  [ usage = "write all libraries"; ],
        in bool wires  [ usage = "write the wires of this block"; ],
        in bool nets  [ usage = "write the nets of this block"; ],
        in bool parasitics  [ usage = "write the parasitics of this block"; ],
        in bool no_nets [usage = "do not write nets when writing parasitics";]
    );

    /**
     * This method will write the timing data to the specified IO stream.
     */
    export write_timing
    ( 
        in string file = "tmg.db"  [ usage = "file"; ],
        in ochannel channel [ usage = "write stream"; ],
        in dbobject block  [ usage = "write timing of this block"; ],
        in string mode = "all" [ usage = "write timing information for specified mode: min, max, or all"; ]
    );

    /**
     * This method will read the timing data from the specified IO stream.
     *
     * The default merge functions are:
     *    max_slack_merge - min()
     *    max_slew_merge - max()
     *    min_slack_merge - min()
     *    min_slew_merge - min()
     */
    export read_timing
    ( 
        in string file = "tmg.db"  [ usage = "file"; ],
        in ichannel channel [ usage = "read stream"; ],
        in dbobject block  [ usage = "read timing into this block"; ],
        in string mode = "all" [ usage = "write timing information for specified mode: min, max, or all"; ],
        in bool merge = false [ usage = "merge with previous timing"; ],
        in string min_slew_merge = "min" [ usage = "merge function, one of min, max or overwrite"; ],
        in string min_slack_merge = "min" [ usage = "merge function, one of min, max or overwrite"; ],
        in string max_slew_merge = "max" [ usage = "merge function, one of min, max or overwrite"; ],
        in string max_slack_merge = "min" [ usage = "merge function, one of min, max or overwrite"; ]
    );

    /**
     * This method will clear the timing data on the specified block.
     */
    export clear_timing
    ( 
        in dbobject block  [ usage = "initialize timing of this block"; ]
    );

    /**
     * This method will initialize the timing data on the specified block.
     * NOTE: This method does not initialize iterms of POWER and GROUND nets.
     */
    export init_timing
    ( 
        in dbobject block  [ usage = "clear timing of this block"; ]
    );

    /**
     * This method will create the specified object in this database.
     */
    export create
    (
        in string lib [ usage = "create a library"; ],
        in bool tech [ usage = "create a tech"; ],
        in bool chip [ usage = "create a chip"; ],
        in string block [ usage = "create a block"; ],
        in dbobject parent [ usage = "parent block for creating a hierachical block"; ],
        out dbobject object [ usage = "object created"; ]
    );

    /**
     * This method will destroy the specified object of this database.
     */
    export destroy
    (
        in dbobject lib [ usage = "delete a library"; ],
        in dbobject chip [ usage = "delete a chip"; ],
        in dbobject block [ usage = "delete a block"; ]
    );

    /**
     * This method will duplicate a block.
     */
    export duplicate
    (
        in dbobject block [ usage = "make a duplicate copy of this child block"; ],
        in string name = "" [ usage = "name of duplicate block"; ],
        out dbobject object [ usage = "make a duplicate copy of this block"; ]
    );

    /**
     * This method will remove the wires of the specified net.
     */
    export remove_wires
    (
        in dbobject net [ usage = "delete all wires for this net"; ]
    );

    /**
     * This method will compute the stored differences between to databases.
     * Use the "differences" method to compute the netlist differences.
     */
    export diff
    (
        in dbobject other [ usage = "diff this db with other"; ],
        in string outfile = "" [ usage = "output to this file"; ],
        in ochannel channel [ usage = "output stream"; ],
        in int indent = 4 [ usage = "indent per level"; ],
        out bool result [ usage = "result = true if differences found"; ]
    );

    /**
     * This method will compute the netlist differences between to blocks.
     */
    export differences
    (
        in dbobject block1 [ usage = "block 1"; ],
        in dbobject block2 [ usage = "block 2"; ],
        in ochannel channel [ usage = "output stream"; ],
        in string outfile = ""  [ usage = "output to this file"; ],
        in int indent = 4 [ usage = "indent per level"; ],
        out bool result [ usage = "result = true if differences found"; ]
    );

    /**
     * This method will re-initialize the in-memory database.
     * All in memory information is lost. All database pointers are invalid.
     ** if block option is valid, the dbBlock will be cleared only
     */
    export clear
    (
        in dbobject block [ usage = "delete a block"; ]
    );

    /**
     * Begin the recording netlist changes to the specified block.
     */
    export begin_eco(
        in dbobject block [ usage = "block"; ]
    );

    /**
     * End the recording netlist changes to the specified block.
     */
    export end_eco
    (
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Returns true if the eco is empty.
     */
    export eco_empty(
        in dbobject block [ usage = "block"; ],
        out bool result [ usage = "return falue"; ]
    );

    /**
     * Read a set of eco changes from the specified file or stream.
     */
    export read_eco
    (
        in dbobject block [ usage = "block"; ],
        in ichannel channel [ usage = "input stream"; ],
        in string file = ""  [ usage = "input from this file"; ]
    );

    /**
     * Write a recorded set of eco changes to the specified file or stream.
     */
    export write_eco
    (
        in dbobject block [ usage = "block"; ],
        in ochannel channel [ usage = "output stream"; ],
        in string file = ""  [ usage = "output to this file"; ]
    );

    export check_eco
    (
        in dbobject block [ usage = "block"; ],
        out int result [ usage = "result variable"; ]
    );

    /**
     * Commit the last read set of eco changes.
     */
    export commit_eco
    (
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Begin the recording timing changes to the specified block.
     */
    export begin_tmg_eco(
        in dbobject block [ usage = "block"; ],
        in int scenario = 0 [ usage = "scenario number 1..N"; ]
    );

    /**
     * End the recording timing changes to the specified block.
     */
    export end_tmg_eco
    (
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Returns true if the eco is empty.
     */
    export eco_tmg_empty(
        in dbobject block [ usage = "block"; ],
        out bool result [ usage = "return falue"; ]
    );

    /**
     * Read a set of timing changes from the specified file or stream.
     * The timing values are merged with any previous read timing ecos.
     */
    export read_tmg_eco
    (
        in dbobject block [ usage = "block"; ],
        in ichannel channel [ usage = "input stream"; ],
        in string file = ""  [ usage = "input from this file"; ],
        in int scenario = 0  [ usage = "scenario idx"; ]
    );

    /**
     * Write a recorded set of eco changes to the specified file or stream.
     */
    export write_tmg_eco
    (
        in dbobject block [ usage = "block"; ],
        in ochannel channel [ usage = "output stream"; ],
        in string file = ""  [ usage = "output to this file"; ]
    );

    export check_tmg_eco
    (
        in dbobject block [ usage = "block"; ],
        out int result [ usage = "result variable"; ]
    );

    /**
     * Commit the pending timing changes to the block
     */
    export commit_tmg_eco
    (
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Create a net.
     */
    export create_net
    (
        in string name [ usage = "name"; ],
        in string type = "signal" [ usage = "values = { signal, power, ground, analog, reset, scan, tieoff }"; ],
        in dbobject block [ usage = "block"; ],
        out dbobject net [ usage = "net"; ]
    );

    /**
     * Delete a net.
     */
    export delete_net
    (
        in string name [ usage = "name"; ],
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Delete an inst.
     */
    export delete_inst
    (
        in string name [ usage = "name"; ],
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Create an inst.
     */
    export create_inst
    (
        in string name [ usage = "name"; ],
        in string lib = "lib" [ usage = "library"; ],
        in string master [ usage = "master"; ],
        in string status = "none" [ usage = "values = { none, unplaced, suggested, placed, locked, firm, cover }"; ],
        in string orient = "R0" [ usage = "values = { R0, R90, R180, R270, MY, MYR90, MX, MXR90 }"; ],
        in int x = 0 [ usage = "x position"; ],
        in int y = 0 [ usage = "y position"; ],
        in dbobject block [ usage = "block"; ],
        out dbobject inst [ usage = "inst"; ]
    );

    /**
     * Connect an iterm.
     */
    export connect_iterm
    (
        in string net [ usage = "net name"; ],
        in string inst [ usage = "inst name"; ],
        in string term [ usage = "terminal name"; ],
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Disconnect an iterm.
     */
    export disconnect_iterm
    (
        in string inst [ usage = "inst name"; ],
        in string term [ usage = "terminal name"; ],
        in dbobject block [ usage = "block"; ]
    );

    /**
     * Swap the instance master.
     */
    export swap_master
    (
        in string inst [ usage = "inst name"; ],
        in string lib = "lib" [ usage = "library name"; ],
        in string master [ usage = "master name"; ],
        in dbobject block [ usage = "block"; ]
    );

    /**
     * This method should go away. 
     * It's function was(?) to connect this database to the original prototype code.
     */
    export connect_ztop();

    /**
     * This is a test method. 
     * It prints the names of the specified objects of this database.
     */
    export names
    ( 
        in bool net [ usage = "for test only"; ],
        in bool inst [ usage = "for test only"; ],
        in bool bterm [ usage = "for test only"; ],
        in bool iterm [ usage = "for test only"; ],
        in bool gcell [ usage = "for test only"; ],
        in bool track [ usage = "for test only"; ],
        in bool wire [ usage = "for test only"; ]
    );

    /**
     * Another test method. It should go away.
     */
    export test_wires();
    export test_wires2();

    export test_error(
        in string message [ usage = "error message to display"; ]
    );

    export test_wire_graph(
        in dbobject block [ usage = "test the wire on the nets of this block"; ],
        in string net [ usage = "test this net only"; ]
    );

    /**
     * This method orders the wires of this database.
     */
    export order_wires
    (
        in dbobject block [ usage = "order wires on the nets of this block"; ],
        in string net = ""  [ usage = "debug, name or id, order this net only"; ],
        in bool force [ usage = "order wires even when the net is wire_ordered"; ],
        in bool verbose [ usage = "debug, only used with -net"; ],
        in int max_length = 0 [ usage = "split wire longer than max_length. 0 means no split"; ],
        in int cut_length = 0 [ usage = "split wire at coordinates of multiples of cut_length. 0 means no split"; ],
        in bool no_patch [ usage = "obsolete"; ],
        in bool quiet [ usage = "quiet"; ]
    );

    /**
     * Return extraction status.
     */
    export ext_info
    (
        in dbobject block [ usage = "block"; ],
        out bool extracted [ usage = "return value for ext_info flag"; ],
        out bool foreign [ usage = "return value for foreign flag"; ]
    );

    /**
     * Translates SDC constraints to names with DB ids
     */
    export translate_sdc
    ( 
        in dbobject block [ usage = "db block, default is top"; ],
        in string infile [ usage = "input_file"; ],
        in string outfile [ usage = "output_file"; ]
    );
 
    /**
     * Return corner names.
     */
    export get_extraction_corners
    (
        in dbobject block [ usage = "block"; ],
        out list string names [ usage = "list of corner names"; ]
    );

    /**
     * Return design stats
     */
    export get_block_stats
    (
        in dbobject block [ usage = "block"; ],
        in bool print [ usage = "print stats"; ],
        out int inst_count [ usage = "return number of instances"; ],
        out int net_count [ usage = "return number of nets"; ],
        out int wire_count [ usage = "return number of wires"; ],
        out int bterm_count [ usage = "return number of block terms"; ],
        out int iterm_count [ usage = "return number of instance terms"; ]
    );

    /**
     * This method finds nets that are not connected.
     */
    export find_disconnects
    (
        in dbobject block [ usage = "order wires on the nets of this block"; ],
	in bool verbose [ usage = "Identify each disconnected net"; ]
    );

    /**
     * This method creates the search databases.
     */
    export make_area_search
    (
        in bool top [ usage = "only top level block"; ],
        in bool all_blocks [ usage = "all children for top level block only"; ],
        in dbobject block [ usage = "db block"; ],
        in bool nets [ usage = "for all net shapes"; ],
        in bool insts [ usage = "for all inst bbox's"; ]
    );

    /**
     * Test function. Should go away.
     */
    export test_timing_modes
    (
        in dbobject block [ usage = "db block"; ]
    );

    /**
     * Test function. Should go away.
     */
    export test_list
    (
        in list rect rects_in [ usage = "rect list"; ],
        out list rect rects_out [ usage = "rect list"; ],
        in list int ints_in [ usage = "int list"; ],
        out list int ints_out [ usage = "int list"; ]
    );

    /**
     * This method attaches this database to the GUI.
     */
    export attach_gui
    (
        in bool top [ usage = "only top level block"; ],
        in bool all_blocks [ usage = "all children for top level block only"; ],
        in dbobject block [ usage = "db block"; ],
	in zobject dcr [ usage = "data crawler zptr to be attached to"; ]
    );

    /**
     * Another test function. Should go away.
     */
    export test_swap_master
    (
    );

    /**
     * Apply specified action to each net in the design. 
     */
    export set_attribute_for_signal_nets
    (
		in string rule_only [ usage = "Set attribute(s) for nets with specified non-default rule, or use string 'default' to apply to default nets only.  If not specified, apply settings to all signal nets.  Has no effect when used with -net"; ],
	        in string net = ""  [ usage = "Name or id, set attribute(s) for this net only"; ],
		in string new_rule [ usage = "Set non-default rule attribute. Use string 'default' to set default rule attribute. NOTE: Does not change existing wiring!"; ],
		in string new_wiretype [ usage = "Set wire type attribute for all wires of net. Has no effect if net has no wires(?)"; ]
    );

    /**
     * Places number of nets with altered or disconnected flag into output arg
     * Returns status.
     */
    export count_attribute_for_signal_nets
    (
	in dbobject block [ usage = "db block"; ],
	out int altered [ usage = "Yield count of altered nets"; ],
	out int disconnected [ usage = "Yield count of disconnected nets"; ]
    );

    /**
     * records current memory and CPU usage.
     * On 2nd and subsequent calls, records change in memory and CPU usage
     * since last rlog invocation.
     */
    export rlog
    ( 
        in string tag = ""  [ usage = "tag on usage print"; ],
        in bool ss [ usage = "report in small scales" ; ]
    );

    /**
     * check layers
     */
    export check_layer
    (
        in bool type [ usage = "check if type is not routing layer" ; ],
        in bool width [ usage = "check if width is 0" ; ],
        in bool spacing [ usage = "check if spacing is less than or equal to 0" ; ],
        in bool pitch [ usage = "check if spacing is less than or equal to 0" ; ]
    );

    export check_backslash
    (
        in bool net [ usage = "check if net names has backslash" ; ],
        in bool inst [ usage = "check if inst names has backslash" ; ],
        in bool mterm [ usage = "check if mterm names has backslash" ; ],
        in bool bterm [ usage = "check if bterm names has backslash" ; ],
        out bool has_backslash [ usage = "result = true if backslashes found"; ]
    );

    /**
     * print dbWire of net(s)
     */
    export print_wire
    (
        in string net = "" [ usage = "List of net Ids to print wire" ; ],
        in string tag = "" [ usage = "tag on the file name" ; ]
    );

    /**
     * print dbRSeg of net(s)
     */
    export print_rseg
    (
        in string net = "" [ usage = "List of net Ids to print rseg" ; ],
        in string tag = "" [ usage = "tag on the file name" ; ]
    );

    /**
     * print dbCapNode of net(s)
     */
    export print_capn
    (
        in string net = "" [ usage = "List of net Ids to print capNode" ; ],
        in string tag = "" [ usage = "tag on the file name" ; ]
    );

    /**
     * print dbWire plus dbRSeg and dbCapNode of net(s)
     */
    export print_wnp
    (
        in string net = "" [ usage = "List of net Ids to print w and p" ; ],
        in string tag = "" [ usage = "tag on the file name" ; ]
    );
    /**
     * print differences of net caps against a ref file with pair of values names
     */
    export diff_net_cap
    (
        in string ref_file = "" [ usage = "File name with cap values and net names pairs" ; ],
        in string out_file = "" [ usage = "File name with % results; if empty notice is used" ; ],
        in string log_file = "" [ usage = "File name that warnigs are printed; if empty warning is used" ; ]
    );

    export test_eco();

    export begin_iterm_missing_scenarios(
	in dbobject block [ usage = " block"; ]
    );

    export begin_scenario_missing_iterms(
        in dbobject block [ usage = " block"; ]
    );

    export get_scenario_missing_iterms(
        in dbobject block [usage = "block";],
        in int scenario [usage = "scenario to get iterm list for";],
        out list int itermlist [usage = "list of iterms";]
    );


    /**
     * payam: changed output from int to float
     */
    export get_iterm_timing_data (
        in dbobject block [usage = "block";],
        in list int itermlist [usage = "list of iterms";],
        out list float tlist [usage = "list of iterm timing data";]
    );

    /**
     * payam: changed output from int to float
     */
    export set_scenario_missing_iterms(
        in dbobject block [usage = "block";],
        in int scenario [usage = "scenario to get iterm list for";],
        in list float tlist [usage = "list of iterm timing data";]
    );

    export next_iterm_missing_scenarios(
	in dbobject block [ usage = " block"; ],
        out int iterm [ usage = "iterm-id"; ],
        out list int scenarios [ usage = "list of scenarios"; ]
    );

    export begin_bterm_missing_scenarios(
	in dbobject block [ usage = " block"; ]
    );

    export next_bterm_missing_scenarios(
	in dbobject block [ usage = " block"; ],
        out int bterm [ usage = "bterm-id"; ],
        out list int scenarios [ usage = "list of scenarios"; ]
    );

    export update_iterm_missing_scenario(
	    in dbobject block [ usage = "block"; ],
        in int scenario = -1 [ usage = "scenario number"; ],
        in int iterm = 0 [ usage = "iterm-id"; ],
        in list int values [ usage = "list of timing values"; ]
    );

    export update_bterm_missing_scenario(
	in dbobject block [ usage = "block"; ],
        in int scenario = -1 [ usage = "scenario number"; ],
        in int bterm = 0[ usage = "bterm-id"; ],
        in list int values [ usage = "list of timing values"; ]
    );

    export set_number_of_scenarios(
	    in dbobject block [ usage = "block"; ],
	    in int count = -1 [ usage = "number of timing scenarios"; ]
    );

    export testlist(
        in int scenario = -1 [ usage = "scenario number"; ],
        in int bterm = 0[ usage = "bterm-id"; ],
        in list int values [ usage = "list of timing values"; ],
        out list int results [ usage = "list of timing values"; ]
    );

    export report_regions(
    );

    export set_rebuffer_altered_nets(
    );

    export no_rebuffer_altered_nets(
    );

    export print_control(
        in string name [ usage = "control names: EXTTREE, EXTRACT"; ],
        in string nets [ usage = "net names or ids to trigger printing"; ],
        in string insts [ usage = "inst names or ids to trigger printing"; ]
    );

    export encrypt_file (
        in string filename [usage = "input ascii file"; ],
        in string outfile [usage = "output encrypted file";]
    );
    export decrypt_file (
        in string filename [usage = "input encrypted file"; ],
        in string outfile [usage = "output ascii file";]
    );

    /**
     * Flatten the hierarchical block.
     */
    export flatten(
        in dbobject block [ usage = "Block to flatten, otherwise top block is flattened."; ],
        in int levels = -1 [ usage = "number of levels, default -1, all levels"; ],
        in bool create_boundary_regions = false [ usage = "for each hierarchical block create a parent regions of all the child block regions"; ],
        in bool copy_parasitics = false [ usage = "merge all parasitics"; ],
        in bool create_bterm_map = false [ usage = "create a bterm map for hier. eco"; ]
	    );

     /**
     * This method creates properties 
     */
    export create_property
    ( 
        in string name [ usage = "user property name"; ],
        in string string_value = "" [ usage = "string value for a string property"; ],
        in float float_value = 0.0 [ usage = "float value for a float property"; ],
        in int int_value = 0 [ usage = "int value for a int property"; ],
        in bool bool_value = false [ usage = "bool value for a bool property"; ],
        in dbobject object [ usage = "database object; default object is DB"; ]
    );

     /**
     * This method gets the value of a property by name and object
     */
    export find_property
    ( 
        in string name [ usage = "user property name"; ],
        in dbobject object [ usage = "database object; default object is DB"; ],
        out string value [ usage = "value for the found property"; ]
    );

     /**
      * This methods marks all wires as updated. Notifies eco engines wires have changed.
      */
    export eco_update_wires(
        in dbobject block [ usage = "block; default object is DB"; ]
    );
}
